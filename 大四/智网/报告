#选题：无线室内定位

# 一、 项目内容和意义

本项目要求为，在室内部署多个信标，通过相对的信号强度估计终端的位置。需要支持同时对多个终端进行定位，并实时地对定位结果进行可视化。

实用上可以对于电子设备进行查找和追踪，用于分析生活轨迹等。


*  信标采用课程分发的树莓派Model 4B，由于三台树莓派即可以完成定位算法，同时考虑到系统节能，使用三台树莓派实现。

*  终端采用小组成员的手机，在最终验收的时候由于需要一部手机拍照和录制视频，因此仅对于两部手机进行定位。

*  可视化部分采用Python绘图输出，用不同的标记显示出信标和终端的位置。

# 二、 主要思路

本项目的主要思路可以分为以下两部分，一个是如何获取待测终端的信号强度，另一个如何从信号强度中计算位置。

## 获取信号强度

1.  用树莓派集成好的模块接收无线信号，并获取其信号强度（RSSI）。信号强度用于表征信标和终端之间的距离关系。

2.  采用树莓派可用的指令对周边设备的无线信号进行扫描，可扫描的无线信号包括蓝牙信号和WIFI信号。在扫描到的信息中可以获取设备的MAC地址，RSSI和设备名称等信息，可以区分多个设备，并计算距离。

3. 由于设备的MAC地址是唯一的，且手机的MAC地址不变，因此可以作为区分设备的标签，即不需要WIFI热点的名称。故对于树莓派无线信号扫描获取到的信息进行筛选，得到设备的MAC地址以及信号强度。

## 位置计算

1.  对于检测到的RSSI，需要转换为实际距离，可以根据相应的公式计算。由于公式中的系数和所处环境以及检测模块均相关，因此需要实测数据进行拟合。

2.  根据计算到的实际距离，以及信标的确定坐标，基于三点定位算法对于终端进行定位。

## 无线信号选取

1. 查阅资料

首先，由于对于树莓派的使用并不熟悉，在此之前无线方面的实践较少，因此先查阅了相应的蓝牙模块和wifi模块，可以从python和树莓派linux指令中入手。

python方面，可以使用bluepy和pybluez的包。

树莓派方面，可以使用bluetoothctl指令对于蓝牙进行搜索，使用wpa_cli指令对于wifi热点进行搜索。

2. 蓝牙

考虑到题目要求中给出了蓝牙，因此我们先采用蓝牙进行定位信息的获取。在蓝牙获取定位信息的实践中，我们先后对于资料中的内容进行了尝试。

    2.1  bluetoothctl指令

    可以检测到开启蓝牙的设备，但对于手机蓝牙的检测具有较大的延迟和丢失。在终端静止时，蓝牙RSSI仍有较强的波动。

    2.2  bluepy指令

    可以获取到开启蓝牙的设备的MAC地址和RSSI以及其他信息（如下），但没有找到小组成员的手机设备。nsfw_2.ipynb中输出可以看出。

    Device 69:dc:cc:9c:55:11 (random), RSSI=-73 dB 

    Flags = 1a 

    Tx Power = 18 

    Manufacturer = 4c0010050d98864b11

    2.3  bluez指令

    参考了网上的代码，但是在信息提取时无法进行数据报的解析。nsfw_1.ipynb中输出可以看出。

3.  WIFI

WIFI的检测使用wpa_cli指令实现，且可以稳定检测到多个终端。

经测试，对于同一个信标，RSSI值和实际距离呈单调变化关系。

输出信息包括MAC地址，热点名称和RSSI值等。

在距离较远时，测得的RSSI会有一定范围的漂移，导致定位误差。


# 三、 实现步骤
## 数据获取
指令获取扫描蓝牙设备和WIFI设备获取到MAC地址需要利用对应的包并运行相应的指令。

利用蓝牙设备扫描处理需要在命令行中运行bluetoothctl指令，在Python中安装bluez包或者bluepy包。

利用WIFI设备扫描时需要在命令行中运行wpa_cli -i wlan0 scan搜索WIFI热点，之后运行wpa_cli -i wlan0 scan_result输出，使用Python的os.system和os.popen实现在python jupyter中得到命令行的输入和输出。

## 数据传递
信息传递参考了实验二与实验三的方法，利用基于ZeroMQ框架的发布-订阅模式使三台树莓派组成局域网。

在一台树莓派上运行消息代理 (broker) 程序，这台树莓派也作为之后数据处理的中枢，将其称之为主树莓派，另外两个树莓派为从树莓派。主树莓派通过多线程来实现同时接受与处理数据，其运行三个线程，分别进行自身的WIFI强度信号获取、从树莓派的信息接收、数据的实时处理三部分任务。

在数据传递时由于原始得到的信息格式不方便处理，需要通过相应的字符串处理方法得到相应的RSSI、MAC地址、设备名称等信息，以便于下一步数据处理。
## 数据处理
### 距离计算
根据已有打参考文献能够得到RSSI到距离d的关系式：d = 10^((abs(rssi) - A) / (10 * n))

公式中A为发射端和接收端相隔1米时的信号强度，n是环境衰减因子。

测试时我们发现不同树莓派在不同环境下的A和n存在差异，因此对于不同树莓派，需要实际测几组数据拟合得到参数A和n，从而确定RSSI与d的关系式，根据得到的RSSI值计算出三台树莓派分别到WIFI设备的距离。
### 三点定位
在定位算法中我们基于三点定位的方法进行处理，理想情况下三点定位根据得到的半径作圆三个圆共同的交点即是定位位置，如图所示。

![image](uploads/910a0e12c2097809ddd90153aa81426c/image.png)

但考虑到测量误差三圆并不会相交于一点，因此需要考虑各种情况，三圆彼此相交、两圆外离、内含、相交、相切等情况需要分类讨论。

三圆相交时，如下图所示，需要在算法中找到六个交点中距离较近的B、C、E三点，并取平均作为最终的交点。

![image](uploads/1ebdd733549d53af253d5f52f51a308c/image.png)

两圆外离时，取两圆心连线以两圆半径比为分割的分割点为两圆交点，如图中O点所示。

![image](uploads/79a948289c88127a301848896ff3b924/image.png)

两圆内含时，两圆心连线延长线在圆周上将会有四个交点，取距离较近的两个不同圆的交点的连线，对应以两圆半径比为分割的分割点为两圆交点。

两圆相交时，选取两交点中距离已得到的交点中距离更近的一个。

在筛选出三个两两的交点后，求平均得到最终的交点即是定位的位置。


## 可视化
用Matplotlib绘图库实现定位的可视化，能够实现三个蓝牙信标与多终端的实时显示，效果如下图所示，其中三个不同颜色的圆点表示不同的树莓派信标，五角星表示实时定位的WIFI终端位置，能够实现多个终端位置的实时显示。

![image](uploads/774e18ddeacce4f0fb1d70235ffea0ba/image.png)

# 四、 实验结果
为测试系统的定位效果，我们分别设计了静态和动态两种情况下的实验。在实验中，为了更便捷地区分不同树莓派，程序加入了按树莓派序号点亮LED灯的设计。
## 静态多设备定位
将树莓派信标摆在一个直角三角形的三个顶点上，两个直角边长分别为40cm和30cm，在程序中设定信标位置，为(20,20) (60,20) (20,50)，再将两个打开了wifi热点的终端设备分别放在直角三角形的中心位置和直角顶点关于斜边中心对称的位置上，如图所示，其中红框框出的是三个树莓派，黄色圆圈中是两个终端设备。

![1](uploads/c8cd6f34d8b844b2a8f8486531667de1/1.png)

定位结果如下图2所示，可以看到两个五角星的位置基本符合手机终端的摆放位置，计算出的两个位置坐标分别为(55.23 44.93)和(36.15 33.81)，在考虑手机自身体积的情况下，wifi2的位置基本没有偏差，距离信标较远的wifi1有4-5cm左右的偏差，在可接受的范围内。

![2](uploads/9ff086430494e80109aceb00e2341648/2.png)

## 动态多设备定位
在动态定位的测试中，初始时信标和终端都保持图1(b)的位置，之后将摆在三角形中心位置的手机缓慢下移置底部直角边以外，另一个手机保持不动，在输出结果中观察到如图3所示的变化，其中绿色五角星基本反应了手机终端在实际测试中的实时位置变化，之后再缓慢将手机移回原位置，输出结果也随之变为初始状态。

具体过程见上传视频。

![3](uploads/ad3a8614f71fa676b9f1d66b7f0f625d/3.png)
![4](uploads/c66cc6b16ac8968ce0f9c30cc0d88cd2/4.png)
![5](uploads/7a038a3ce5096926d8dab05cc9daaf98/5.png)

应注意的是，考虑到jupyter notebook的输出较慢，为了展示清晰，程序中负责计算位置坐标和可视化输出的线程一次循环延时设定为3秒，因此结果显示相较实际动态变化有一定延迟，当然，线程周期可以根据需要适当缩短。

# 五、 反思与总结
## 误差分析
受限于多种因素，本项目最终结果为小范围定性定位，在精确性和鲁棒性上仍存在诸多未解决的问题，经分析，实验中的误差主要来自以下三个方面：
（1）   RSSI的测量不准确。实验中观察到，不论是使用蓝牙还是wifi作为检测信号，树莓派返回的RSSI总无法做到准确、稳定，出现的问题包括不同树莓派测量相同距离返回不同RSSI值，同一树莓派不同时间测量相同距离返回RSSI值不一致且相差较大，这会导致在拟合RSSI转距离曲线参数时出现错误；并且信号测量受环境因素影响较大，如果环境中有障碍物或者其他信号干扰，均会对RSSI测量造成不可忽略的影响，以上属于系统误差，实验过程中难以避免；

（2）	标定参数的过程中引入误差。在（1）中提到不同树莓派对相同距离返回的RSSI值不同，因此为了避免这一部分误差提高准确度，需要对每个树莓派RSSI转距离公式的参数做实验进行标定，在实验中会引入人为误差，可以通过多次测量标定减小；

（3）	定位算法的误差。在计算位置坐标的过程中，通过获得的三个距离信息和树莓派的位置，形成三个圆，三圆交点即为终端位置，但通常由于之前提到的多种因素影响，三个圆无法稳定地交于一点，从而导致误差，因此在程序中，分为两圆内含、相交、相切、外离几种情况讨论，并在保证程序鲁棒性的前提下，通过几种方法如等比求交点、三个交点平均的方法来减小误差。

## 总结与展望
整体而言，本项目较好地达到了初期预期，可以在小范围内反映多终端的实时位置，由于树莓派本身的信号测量不准等原因，输出存在一定的误差和跳变，但多数帧都有较好的结果。通过本次项目，我们对树莓派的使用和消息传递有了更充分的了解和掌握，学习了多线程和分布式的编程思想，锻炼了动手能力和编程能力，也加深了对智能网联课程中相关内容的理解，收获颇丰。最后，谢谢老师和助教在大作业过程中对我们的帮助！


# 六、分工

屈晨迪 2017010928 ：信息筛选（字符串处理），各部分代码整合

游正阳 2017011594 ：信息传递（树莓派之间），三点定位计算，可视化显示

程雪珂 2017012778 ：设备扫描（获取终端无线信息），距离转换（RSSI转距离）

# 七、参考
[1] https://github.com/pybluez/pybluez/blob/master/examples/ble/scan.py

[2] https://github.com/pybluez/pybluez

[3] https://stackoverflow.com/questions/55836898/is-there-any-other-way-to-get-rssi-values-than-bluez-pybluez

[4] https://www.cnblogs.com/zjutlitao/p/10171913.html

[5] https://blog.csdn.net/weixin_50396804/article/details/109823229

[6] https://blog.csdn.net/Cherish_x/article/details/79345315?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control

[7] https://blog.csdn.net/u011957515/article/details/53634371

[8] https://blog.csdn.net/m0_37580896/article/details/81330159

[9] https://github.com/ewenchou/bluetooth-proximity/blob/master/bt_proximity/bt_rssi.py
